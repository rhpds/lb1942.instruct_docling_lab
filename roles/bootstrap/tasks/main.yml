---
- name: Retrieve Ingress config
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: r_ingress_config

- name: Set apps domain fact
  set_fact:
    bootstrap_ocp_apps_url: "{{ r_ingress_config.resources[0].spec.domain }}"

- name: Clone {{ bootstrap_rh_submit_repo }}
  ansible.builtin.git:
    repo: "{{ bootstrap_rh_submit_repo }}"
    dest: ~/elyra_docling_rh_summit
    single_branch: yes
    version: rhpds

- name: Setup Openshift AI
  ansible.builtin.shell: |
    oc apply -k ./components/openshift-ai/instance/overlays/fast
  args:
    chdir: ~/elyra_docling_rh_summit

- name: Pause
  ansible.builtin.pause:
    minutes: 1

- name: Wait for RHOAI
  kubernetes.core.k8s_info:
    api_version: datasciencecluster.opendatahub.io/v1
    kind: DataScienceCluster
    name: default-dsc
  register: r_dsc
  retries: 60
  delay: 10
  until:
  - r_dsc.resources is defined
  - r_dsc.resources | length > 0
  - r_dsc.resources[0].status is defined
  - r_dsc.resources[0].status.phase is defined
  - r_dsc.resources[0].status.phase == 'Ready'

- name: Recreate ingress cert of KServe
  shell: |
    INGRESS_CERT_SECRET=$(oc get secrets -n openshift-ingress -o json | jq -r '.items[] | select(.type=="kubernetes.io/tls") | .metadata.name' | grep ingress-cert)
    oc extract secret/$INGRESS_CERT_SECRET -n openshift-ingress --to=ingress-certs --confirm
    oc create secret generic knative-serving-cert -n istio-system --from-file=ingress-certs/. --dry-run=client -o yaml | oc apply -f -
    rm -rf ingress-certs

- name: Setup Openshift AI single serving runtime
  ansible.builtin.shell: |
    oc apply -k components/model-server/components-serving
  args:
    chdir: ~/elyra_docling_rh_summit

- name: Create granite model project
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'granite-model-namespace.yml.j2') | from_yaml }}"

- name: Setup user namespaces resources
  include_tasks: setup_user_namespace_resources.yml
  loop: "{{ range(0, bootstrap_num_users | int, 1) | list }}"
  loop_control:
    loop_var: n
  vars:
    index: "{{ n | int + 1 }}"

- name: Setup the model project - Create bucket job
  ansible.builtin.shell: |
    oc project $SUMMIT_PROJECT

    oc apply -k ./components/minio/base

    export MINIO_API_URL=$(oc get routes -n $SUMMIT_PROJECT -o custom-columns=":spec.host" | grep minio-api)
    envsubst < components/create-bucket-job/base/create-bucket-job-template.yaml > components/create-bucket-job/base/create-bucket-job.yaml
    oc create configmap -n ${SUMMIT_PROJECT} model-config-file
    oc apply -k ./components/create-bucket-job/base
  args:
    chdir: ~/elyra_docling_rh_summit
  environment:
    SUMMIT_PROJECT: granite-model-project

- name: Wait for minio deployment
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: minio
    namespace: granite-model-project
  register: r_minio_deployment
  retries: 60
  delay: 10
  until:
  - r_minio_deployment.resources is defined
  - r_minio_deployment.resources | length > 0
  - r_minio_deployment.resources[0].status is defined
  - r_minio_deployment.resources[0].status.readyReplicas is defined
  - r_minio_deployment.resources[0].status.readyReplicas > 0

- name: Setup the model project - Install pip dependencies
  ansible.builtin.shell: |
    python -m pip install huggingface_hub=={{ bootstrap_huggingface_hub_version }}
    python -m pip install boto3=={{ bootstrap_boto3_version }}

- name: Setup the model project - Download model
  ansible.builtin.shell: |
    python components/model-server/download-model.py
  args:
    chdir: ~/elyra_docling_rh_summit

- name: Setup the model project - Upload model
  ansible.builtin.shell: |
    export MINIO_API_URL=$(oc get routes -n granite-model-project -o custom-columns=":spec.host" | grep minio-api)
    python components/model-server/model-folder-upload.py
  args:
    chdir: ~/elyra_docling_rh_summit
  retries: 60
  delay: 10
  register: r_model_project
  until: r_model_project is not failed

- name: Setup the model project - Create granite model resources
  ansible.builtin.shell: |
    oc project granite-model-project
    oc apply -f components/model-server/sa-secret-token.yaml
    oc apply -f components/model-server/granite2b-conn.yaml
    oc apply -f components/model-server/model-namespace.yaml
    oc apply -f components/model-server/servingruntimes.yaml
    oc apply -f components/model-server/inferenceservice.yaml
  args:
    chdir: ~/elyra_docling_rh_summit

- name: Get model token secret
  k8s_info:
    api_version: v1
    kind: Secret
    name: default-name-granite2b-sa
    namespace: granite-model-project
  register: r_secret
  retries: 180
  delay: 10
  until:
  - r_secret.resources | length > 0

- name: Set model service token secret fact
  set_fact:
    bastion_role_model_service_token: "{{ r_secret.resources[0].data.token | b64decode }}"
